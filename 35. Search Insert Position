class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int len = nums.size();
        if(len == 0)                                    //return 0 if no number in array
        {
            return 0;
        }

        return(biSearch(nums, target, 0, len - 1));     //use binary search to find target
    }
    
    //Use binary search with recursion to find the target in array.
    //@param nums The array to be searched.
    //@param target The target number to be searched.
    //@param p & r The range of elements to do the binary search.
    int biSearch(vector<int>& nums, int target, int p, int r)
    {
        if(p >= r)                                      //if less than one element in range
        {
            if(nums[p] >= target)                       //if >= target, insert on this position
            {
                return(p);
            }
            else                                        //if less than target, insert on next position
            {
                return(p + 1);
            }
        }
        else                                            //if more than one element in range
        {
            int q = (p + r) / 2;                        //do binary search
            if(nums[q] == target)                       //check median first
            {
                return(q);
            }
            else if(nums[q] > target)                   //if median > target, search left half
            {
                return(biSearch(nums, target, p, q - 1));
            }
            else                                        //if median < target, search right half
            {
                return(biSearch(nums, target, q + 1, r));
            }
        }
    }
};
