class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int len = nums.size();
        vector<int> result;
        if(len == 0)                                 //if no number in array, return [-1, -1]
        {
            result.push_back(-1);
            result.push_back(-1);
            return(result);
        }
        int l, r;
        l = leftSearch(nums, target, 0, len - 1);    //use binary search to find left range
        r = rightSearch(nums, target, 0, len - 1);   //use binary search to find right range
        result.push_back(l);
        result.push_back(r);
        return(result);
        
    }
    
    //Use binary search to find the left edge with recursion. 
    //@param nums The array to be searched.
    //@param target The number to be searched.
    //@param p,r The elements between p and r will be searched.
    int leftSearch(vector<int>& nums, int target, int p, int r)
    {
        if(p == r)                                    //if only one element, check it
        {
            if(nums[p] == target)
            {
                return(p);
            }
            else
            {
                return(-1);
            }
        }
        else if(p > r)                                //if no element in array, return -1
        {
            return(-1);
        }
        else                                          //use binary search
        {
            int q = (p + r) / 2;
            if(nums[q] >= target)                     //if median >= target, the edge is in left half
            {
                return(leftSearch(nums, target, p, q));        //continue binary search with recursion
            }
            else                                      //if median < target, the edge is in right half
            {
                return(leftSearch(nums, target, q + 1, r));
            }
        }
    }
    
    //Use binary search to find the right edge with recursion. 
    //@param nums The array to be searched.
    //@param target The number to be searched.
    //@param p,r The elements between p and r will be searched.
    int rightSearch(vector<int>& nums, int target, int p, int r)
    {
        if(p == r)
        {
            if(nums[p] == target)
            {
                return(p);
            }
            else
            {
                return(-1);
            }
        }
        else if(p > r)
        {
            return(-1);
        }
        else
        {
            int q = (p + r + 1) / 2;
            if(nums[q] <= target)
            {
                return(rightSearch(nums, target, q, r));
            }
            else
            {
                return(rightSearch(nums, target, p, q - 1));
            }
        }
    }
};
