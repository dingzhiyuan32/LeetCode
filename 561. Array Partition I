class Solution {
public:
    int arrayPairSum(vector<int>& nums) {
        int len = nums.size();
        int a[len];
        for(int i = 0; i < len; i++)
        {
            a[i] = nums[i];
        } 
        quickSort(a, 0, len - 1);            //sort the array first
        int sum = 0;
        for(int i = 0; i < len; i = i + 2)   //choose 1st, 3rd, 5th, ... minimum numbers
        {
            sum = sum + a[i];
        }
        return sum;
    }
    
    //QuickSort the array with recursion.
    //@param a The array to be sorted.
    //@param p, r The elements between p and r will be sorted.
    void quickSort(int *a, int p, int r)
    {
        if(p < r){
            int q = partition(a, p, r);
            quickSort(a, p, q - 1);
            quickSort(a, q + 1, r);
        }
    }
    
    //partition the array for quickSort
    //@param a The array to be sorted.
    //@param p, r The elements between p and r will be partitioned
    int partition(int *a, int p, int r)
    {
        int x = a[r];
        int i = p - 1;
        for(int j = p; j < r; j++)
        {
            if(a[j] <= x)
            {
                i++;
                int temp = a[j];
                a[j] = a[i];
                a[i] = temp;
            }
        }
        i++;
        int temp = a[r];
        a[r] = a[i];
        a[i] = temp;
        return i;
    }
    
        
};
